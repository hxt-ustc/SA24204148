ret_q3 <- QrNet(A, X, y,tau = 0.3)
ret_q3$beta
ret_q4 <- QrNet(A, X, y,tau = 0.7)
ret_q4$beta
ret_q5 <- QrNet(A, X, y,tau = 0.9)
ret_q5$beta
library(knitr)  # 用于生成表格
# 运行 two_stage 方法
ret <- two_stage(A, X, y)
beta_two_stage <- ret$beta
# 运行 QrNet 方法
tau_values <- c(0.1, 0.3, 0.5, 0.7, 0.9)
beta_qrnet <- lapply(tau_values, function(tau) {
ret_q <- QrNet(A, X, y, tau = tau)
ret_q$beta
})
# 将结果整理为数据框
result_table <- data.frame(
Beta = paste0("Beta_", 1:length(beta_two_stage)),
Two_Stage = beta_two_stage
)
# 添加不同分位数的 QrNet 结果到数据框
for (i in seq_along(tau_values)) {
result_table[[paste0("Tau = ", tau_values[i])]] <- beta_qrnet[[i]]
}
# 打印表格
kable(result_table, format = "markdown", caption = "Comparison of Two-Stage and QrNet Methods")
ret <- two_stage(A, X, y)
ret$beta
ret_q1 <- QrNet(A, X, y, tau = 0.5)
ret_q1$beta
ret_q2 <- QrNet(A, X, y,tau = 0.1)
ret_q2$beta
ret_q3 <- QrNet(A, X, y,tau = 0.3)
ret_q3$beta
ret_q4 <- QrNet(A, X, y,tau = 0.7)
ret_q4$beta
ret_q5 <- QrNet(A, X, y,tau = 0.9)
ret_q5$beta
set.seed(0)
n=1e3
d=1
p=3
sigma_a_set=c(2^(-4),2^(-2))
u=matrix(rnorm(n,0,1),ncol = 1)
v=0.5*u+matrix(rnorm(n,0,1),ncol = 1)
u = u/sqrt(sum(u^2))*sqrt(n)
v = v/sqrt(sum(v^2))*sqrt(n)
sigma_a=sigma_a_set[1] #  choose sigma_a
A=d*u%*%t(v)+matrix(rnorm(n^2,0,sigma_a^2),n,n)
beta_x=matrix(c(1,3,5),ncol=1)
beta_v=1
beta_u_set=c(2^0,2^2,2^4)
sigma_y_set=c(2^(-4),2^(-2),2^0)
beta_u=beta_u_set[1] #  choose beta_u
sigma_y=sigma_y_set[3] #  choose beta_y
X=matrix(rnorm(n*p,0,1),nrow = n)
y=X%*%beta_x+u*beta_u+v*beta_v+matrix(rnorm(n,0,sigma_y^2),ncol = 1)
lambda0=n*sigma_y^2/sigma_a^2
# 1. 查看生成的目标变量 y 和预测变量 X 的关系
par(mfrow=c(1,2))
# 可视化 X 和 y 的关系（散点图）
plot(y, type = "p", col = "blue", pch = 16, main = "Target variable y vs. Index", xlab = "Index", ylab = "y")
grid()
# 可视化 X 中的前三个变量
matplot(X[, 1:3], type = "l", col = c("red", "green", "blue"), lty = 1,
main = "First Three Predictors (X)", xlab = "Index", ylab = "Value")
legend("topright", legend = c("X1", "X2", "X3"), col = c("red", "green", "blue"), lty = 1)
# 2. 可视化网络数据 A 的结构（前几行）
image(A[1:20, 1:20], main = "Network Structure A (Subset)", xlab = "Index", ylab = "Index")
# 3. 可视化 u 和 v 的关系
par(mfrow = c(1, 2))
# u 和 v 的关系（散点图）
plot(u, v, col = "purple", pch = 16, main = "Relationship between u and v",
xlab = "u", ylab = "v")
# u 和 v 的时间序列图
plot(u, type = "l", col = "red", main = "Time Series of u and v", xlab = "Index", ylab = "Value")
lines(v, col = "blue")
legend("topright", legend = c("u", "v"), col = c("red", "blue"), lty = 1)
ret <- two_stage(A, X, y)
ret$beta
ret_q1 <- QrNet(A, X, y, tau = 0.5)
ret_q1$beta
ret_q2 <- QrNet(A, X, y,tau = 0.1)
ret_q2$beta
ret_q3 <- QrNet(A, X, y,tau = 0.3)
ret_q3$beta
ret_q4 <- QrNet(A, X, y,tau = 0.7)
ret_q4$beta
ret_q5 <- QrNet(A, X, y,tau = 0.9)
ret_q5$beta
set.seed(0)
n=1e3
d=1
p=3
sigma_a_set=c(2^(-4),2^(-2))
u=matrix(rnorm(n,0,1),ncol = 1)
v=0.5*u+matrix(rnorm(n,0,1),ncol = 1)
u = u/sqrt(sum(u^2))*sqrt(n)
v = v/sqrt(sum(v^2))*sqrt(n)
sigma_a=sigma_a_set[2] #  choose sigma_a
A=d*u%*%t(v)+matrix(rnorm(n^2,0,sigma_a^2),n,n)
beta_x=matrix(c(1,3,5),ncol=1)
beta_v=1
beta_u_set=c(2^0,2^2,2^4)
sigma_y_set=c(2^(-4),2^(-2),2^0)
beta_u=beta_u_set[1] #  choose beta_u
sigma_y=sigma_y_set[3] #  choose beta_y
X=matrix(rnorm(n*p,0,1),nrow = n)
y=X%*%beta_x+u*beta_u+v*beta_v+matrix(rnorm(n,0,sigma_y^2),ncol = 1)
lambda0=n*sigma_y^2/sigma_a^2
# 1. 查看生成的目标变量 y 和预测变量 X 的关系
par(mfrow=c(1,2))
# 可视化 X 和 y 的关系（散点图）
plot(y, type = "p", col = "blue", pch = 16, main = "Target variable y vs. Index", xlab = "Index", ylab = "y")
grid()
# 可视化 X 中的前三个变量
matplot(X[, 1:3], type = "l", col = c("red", "green", "blue"), lty = 1,
main = "First Three Predictors (X)", xlab = "Index", ylab = "Value")
legend("topright", legend = c("X1", "X2", "X3"), col = c("red", "green", "blue"), lty = 1)
# 2. 可视化网络数据 A 的结构（前几行）
image(A[1:20, 1:20], main = "Network Structure A (Subset)", xlab = "Index", ylab = "Index")
# 3. 可视化 u 和 v 的关系
par(mfrow = c(1, 2))
# u 和 v 的关系（散点图）
plot(u, v, col = "purple", pch = 16, main = "Relationship between u and v",
xlab = "u", ylab = "v")
# u 和 v 的时间序列图
plot(u, type = "l", col = "red", main = "Time Series of u and v", xlab = "Index", ylab = "Value")
lines(v, col = "blue")
legend("topright", legend = c("u", "v"), col = c("red", "blue"), lty = 1)
ret <- two_stage(A, X, y)
ret$beta
ret_q1 <- QrNet(A, X, y, tau = 0.5)
ret_q1$beta
ret_q2 <- QrNet(A, X, y,tau = 0.1)
ret_q2$beta
ret_q3 <- QrNet(A, X, y,tau = 0.3)
ret_q3$beta
ret_q4 <- QrNet(A, X, y,tau = 0.7)
ret_q4$beta
ret_q5 <- QrNet(A, X, y,tau = 0.9)
ret_q5$beta
ret <- two_stage(A, X, y)
ret$beta
ret_q1 <- QrNet(A, X, y, tau = 0.5)
ret_q1$beta
ret_q2 <- QrNet(A, X, y,tau = 0.1)
ret_q2$beta
ret_q5 <- QrNet(A, X, y,tau = 0.9)
ret_q5$beta
library(knitr)  # 用于生成表格
# 运行 two_stage 方法
ret <- two_stage(A, X, y)
beta_two_stage <- ret$beta
# 运行 QrNet 方法
tau_values <- c(0.1, 0.3, 0.5, 0.7, 0.9)
beta_qrnet <- lapply(tau_values, function(tau) {
ret_q <- QrNet(A, X, y, tau = tau)
ret_q$beta
})
# 将结果整理为数据框
result_table <- data.frame(
Beta = paste0("Beta_", 1:length(beta_two_stage)),
Two_Stage = beta_two_stage
)
# 添加不同分位数的 QrNet 结果到数据框
for (i in seq_along(tau_values)) {
result_table[[paste0("Tau = ", tau_values[i])]] <- beta_qrnet[[i]]
}
# 打印表格
kable(result_table, format = "markdown", caption = "Comparison of Two-Stage and QrNet Methods")
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
set.seed(0)
n=1e3
d=1
p=3
sigma_a_set=c(2^(-4),2^(-2))
u=matrix(rnorm(n,0,1),ncol = 1)
v=0.5*u+matrix(rnorm(n,0,1),ncol = 1)
u = u/sqrt(sum(u^2))*sqrt(n)
v = v/sqrt(sum(v^2))*sqrt(n)
sigma_a=sigma_a_set[2] #  choose sigma_a
A=d*u%*%t(v)+matrix(rnorm(n^2,0,sigma_a^2),n,n)
beta_x=matrix(c(1,3,5),ncol=1)
beta_v=1
beta_u_set=c(2^0,2^2,2^4)
sigma_y_set=c(2^(-4),2^(-2),2^0)
beta_u=beta_u_set[1] #  choose beta_u
sigma_y=sigma_y_set[3] #  choose beta_y
X=matrix(rnorm(n*p,0,1),nrow = n)
y=X%*%beta_x+u*beta_u+v*beta_v+matrix(rnorm(n,0,sigma_y^2),ncol = 1)
lambda0=n*sigma_y^2/sigma_a^2
# 1. 查看生成的目标变量 y 和预测变量 X 的关系
# 可视化 X 和 y 的关系（散点图）
plot(y, type = "p", col = "blue", pch = 16, main = "Target variable y vs. Index", xlab = "Index", ylab = "y")
grid()
# 可视化 X 中的前三个变量
matplot(X[, 1:3], type = "l", col = c("red", "green", "blue"), lty = 1,
main = "First Three Predictors (X)", xlab = "Index", ylab = "Value")
legend("topright", legend = c("X1", "X2", "X3"), col = c("red", "green", "blue"), lty = 1)
# 2. 可视化网络数据 A 的结构（前几行）
image(A[1:20, 1:20], main = "Network Structure A (Subset)", xlab = "Index", ylab = "Index")
# 3. 可视化 u 和 v 的关系
par(mfrow = c(1, 2))
# u 和 v 的关系（散点图）
plot(u, v, col = "purple", pch = 16, main = "Relationship between u and v",
xlab = "u", ylab = "v")
# u 和 v 的时间序列图
plot(u, type = "l", col = "red", main = "Time Series of u and v", xlab = "Index", ylab = "Value")
lines(v, col = "blue")
legend("topright", legend = c("u", "v"), col = c("red", "blue"), lty = 1)
set.seed(0)
n=1e3
d=1
p=3
sigma_a_set=c(2^(-4),2^(-2))
u=matrix(rnorm(n,0,1),ncol = 1)
v=0.5*u+matrix(rnorm(n,0,1),ncol = 1)
u = u/sqrt(sum(u^2))*sqrt(n)
v = v/sqrt(sum(v^2))*sqrt(n)
sigma_a=sigma_a_set[2] #  choose sigma_a
A=d*u%*%t(v)+matrix(rnorm(n^2,0,sigma_a^2),n,n)
beta_x=matrix(c(1,3,5),ncol=1)
beta_v=1
beta_u_set=c(2^0,2^2,2^4)
sigma_y_set=c(2^(-4),2^(-2),2^0)
beta_u=beta_u_set[1] #  choose beta_u
sigma_y=sigma_y_set[3] #  choose beta_y
X=matrix(rnorm(n*p,0,1),nrow = n)
y=X%*%beta_x+u*beta_u+v*beta_v+matrix(rnorm(n,0,sigma_y^2),ncol = 1)
lambda0=n*sigma_y^2/sigma_a^2
# 1. 查看生成的目标变量 y 和预测变量 X 的关系
# 可视化 X 和 y 的关系（散点图）
plot(y, type = "p", col = "blue", pch = 16, main = "Target variable y vs. Index", xlab = "Index", ylab = "y")
# 可视化 X 中的前三个变量
matplot(X[, 1:3], type = "l", col = c("red", "green", "blue"), lty = 1,
main = "First Three Predictors (X)", xlab = "Index", ylab = "Value")
legend("topright", legend = c("X1", "X2", "X3"), col = c("red", "green", "blue"), lty = 1)
# 2. 可视化网络数据 A 的结构（前几行）
image(A[1:20, 1:20], main = "Network Structure A (Subset)", xlab = "Index", ylab = "Index")
# 3. 可视化 u 和 v 的关系
par(mfrow = c(1, 2))
# u 和 v 的关系（散点图）
plot(u, v, col = "purple", pch = 16, main = "Relationship between u and v",
xlab = "u", ylab = "v")
# u 和 v 的时间序列图
plot(u, type = "l", col = "red", main = "Time Series of u and v", xlab = "Index", ylab = "Value")
lines(v, col = "blue")
legend("topright", legend = c("u", "v"), col = c("red", "blue"), lty = 1)
set.seed(0)
n=1e3
d=1
p=3
sigma_a_set=c(2^(-4),2^(-2))
u=matrix(rnorm(n,0,1),ncol = 1)
v=0.5*u+matrix(rnorm(n,0,1),ncol = 1)
u = u/sqrt(sum(u^2))*sqrt(n)
v = v/sqrt(sum(v^2))*sqrt(n)
sigma_a=sigma_a_set[2] #  choose sigma_a
A=d*u%*%t(v)+matrix(rnorm(n^2,0,sigma_a^2),n,n)
beta_x=matrix(c(1,3,5),ncol=1)
beta_v=1
beta_u_set=c(2^0,2^2,2^4)
sigma_y_set=c(2^(-4),2^(-2),2^0)
beta_u=beta_u_set[1] #  choose beta_u
sigma_y=sigma_y_set[3] #  choose beta_y
X=matrix(rnorm(n*p,0,1),nrow = n)
y=X%*%beta_x+u*beta_u+v*beta_v+matrix(rnorm(n,0,sigma_y^2),ncol = 1)
lambda0=n*sigma_y^2/sigma_a^2
# 1. 查看生成的目标变量 y 和预测变量 X 的关系
# 可视化 X 和 y 的关系（散点图）
plot(y, type = "p", col = "blue", pch = 16, main = "Target variable y vs. Index", xlab = "Index", ylab = "y")
# 可视化 X 中的前三个变量
matplot(X[, 1:3], type = "l", col = c("red", "green", "blue"), lty = 1,
main = "First Three Predictors (X)", xlab = "Index", ylab = "Value")
legend("topright", legend = c("X1", "X2", "X3"), col = c("red", "green", "blue"), lty = 1)
# 2. 可视化网络数据 A 的结构（前几行）
image(A[1:20, 1:20], main = "Network Structure A (Subset)", xlab = "Index", ylab = "Index")
# 3. 可视化 u 和 v 的关系
# u 和 v 的关系（散点图）
plot(u, v, col = "purple", pch = 16, main = "Relationship between u and v",
xlab = "u", ylab = "v")
# u 和 v 的时间序列图
plot(u, type = "l", col = "red", main = "Time Series of u and v", xlab = "Index", ylab = "Value")
lines(v, col = "blue")
legend("topright", legend = c("u", "v"), col = c("red", "blue"), lty = 1)
devtools::document()
devtools::check()
library(SA24204148)
n <- 100
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret <- two_stage(A, X, y)
ret$coefficients
vec_norm(ret$residuals)
int update_theta(arma::colvec& theta,
n <- 1000
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret_q <- QrNet(A, X, y)
ret_q$beta
set.seed(0)
n=1e3
d=1
p=3
sigma_a_set=c(2^(-4),2^(-2))
u=matrix(rnorm(n,0,1),ncol = 1)
v=0.5*u+matrix(rnorm(n,0,1),ncol = 1)
u = u/sqrt(sum(u^2))*sqrt(n)
v = v/sqrt(sum(v^2))*sqrt(n)
sigma_a=sigma_a_set[2] #  choose sigma_a
A=d*u%*%t(v)+matrix(rnorm(n^2,0,sigma_a^2),n,n)
beta_x=matrix(c(1,3,5),ncol=1)
beta_v=1
beta_u_set=c(2^0,2^2,2^4)
sigma_y_set=c(2^(-4),2^(-2),2^0)
beta_u=beta_u_set[1] #  choose beta_u
sigma_y=sigma_y_set[3] #  choose beta_y
X=matrix(rnorm(n*p,0,1),nrow = n)
y=X%*%beta_x+u*beta_u+v*beta_v+matrix(rnorm(n,0,sigma_y^2),ncol = 1)
lambda0=n*sigma_y^2/sigma_a^2
# 1. 查看生成的目标变量 y 和预测变量 X 的关系
# 可视化 X 和 y 的关系（散点图）
plot(y, type = "p", col = "blue", pch = 16, main = "Target variable y vs. Index", xlab = "Index", ylab = "y")
# 可视化 X 中的前三个变量
matplot(X[, 1:3], type = "l", col = c("red", "green", "blue"), lty = 1,
main = "First Three Predictors (X)", xlab = "Index", ylab = "Value")
legend("topright", legend = c("X1", "X2", "X3"), col = c("red", "green", "blue"), lty = 1)
# 2. 可视化网络数据 A 的结构（前几行）
image(A[1:20, 1:20], main = "Network Structure A (Subset)", xlab = "Index", ylab = "Index")
# 3. 可视化 u 和 v 的关系
# u 和 v 的关系（散点图）
plot(u, v, col = "purple", pch = 16, main = "Relationship between u and v",
xlab = "u", ylab = "v")
# u 和 v 的时间序列图
plot(u, type = "l", col = "red", main = "Time Series of u and v", xlab = "Index", ylab = "Value")
lines(v, col = "blue")
legend("topright", legend = c("u", "v"), col = c("red", "blue"), lty = 1)
library(knitr)  # 用于生成表格
# 运行 two_stage 方法
ret <- two_stage(A, X, y)
beta_two_stage <- ret$beta
# 运行 QrNet 方法
tau_values <- c(0.1, 0.3, 0.5, 0.7, 0.9)
beta_qrnet <- lapply(tau_values, function(tau) {
ret_q <- QrNet(A, X, y, tau = tau)
ret_q$beta
})
# 将结果整理为数据框
result_table <- data.frame(
Beta = paste0("Beta_", 1:length(beta_two_stage)),
Two_Stage = beta_two_stage
)
# 添加不同分位数的 QrNet 结果到数据框
for (i in seq_along(tau_values)) {
result_table[[paste0("Tau = ", tau_values[i])]] <- beta_qrnet[[i]]
}
# 打印表格
kable(result_table, format = "markdown", caption = "Comparison of Two-Stage and QrNet Methods")
devtools::load_all()
library(SA24204148)
detach("package:SA24204148", unload = TRUE)
remove.packages("SA24204148")
library(SA24204148)
devtools::load_all()
devtools::document()
devtools::document()
devtools::check()
devtools::load_all()
devtools::load_all("D:\course_file\SA24204148")
devtools::load_all("D:/course_file/SA24204148")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build()
install.packages("D:/course_file/SA24204148_1.0.tar.gz", repos = NULL, type = "source")
devtools::load_all("D:/course_file/SA24204148“)
devtools::load_all("D:/course_file/SA24204148")
devtools::load_all("D:/course_file/SA24204148")
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build()
install.packages("D:/course_file/SA24204148_1.0.tar.gz", repos = NULL, type = "source")
library(SA24204148)
n <- 100
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret <- two_stage(A, X, y)
ret$coefficients
vec_norm(ret$residuals)
library(SA24204148)
n <- 100
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret <- two_stage(A, X, y)
ret$coefficients
vec_norm(ret$residuals)
n <- 1000
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret_q <- QrNet(A, X, y)
n <- 1000
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret_q <- QrNet(A, X, y)
n <- 1000
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret_q <- QrNet(A, X, y)
library(irlba)
n <- 1000
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret_q <- QrNet(A, X, y)
ret_q$beta
library(irlba)
n <- 1000
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret_q <- QrNet(A, X, y)
ret_q$beta
library(SA24204148)
n <- 100
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret <- two_stage(A, X, y)
ret$coefficients
vec_norm(ret$residuals)
vec_norm <- function(x) {sqrt(sum(x^2))}
library(SA24204148)
n <- 100
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret <- two_stage(A, X, y)
ret$coefficients
vec_norm(ret$residuals)
vec_norm <- function(x) {sqrt(sum(x^2))}
library(SA24204148)
n <- 100
p <- 3
sigmaa <- 1
sigmay <- 1e-5
A <- matrix(rnorm(n^2, sd = sigmaa), nrow = n)
X <- matrix(rnorm(n*p), nrow = n, ncol = p)
y <- rnorm(n, sd = sigmay)
ret <- two_stage(A, X, y)
ret$coefficients
vec_norm(ret$residuals)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes = FALSE)
