// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lr
Rcpp::List lr(const arma::mat& A, const arma::mat& X, const arma::colvec& y, double tau, double l, double sigma, double tol, int max_iter, int verbose, int scaled);
RcppExport SEXP _SA24204148_lr(SEXP ASEXP, SEXP XSEXP, SEXP ySEXP, SEXP tauSEXP, SEXP lSEXP, SEXP sigmaSEXP, SEXP tolSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP scaledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type scaled(scaledSEXP);
    rcpp_result_gen = Rcpp::wrap(lr(A, X, y, tau, l, sigma, tol, max_iter, verbose, scaled));
    return rcpp_result_gen;
END_RCPP
}
// lr_
int lr_(const arma::mat& A, const arma::mat& X, const arma::colvec& y, double tau, arma::colvec& u, arma::colvec& v, arma::colvec& beta, arma::colvec& u_distance, double& d, double l, double sigma, double tol, int max_iter, int verbose, bool uv_is_init);
RcppExport SEXP _SA24204148_lr_(SEXP ASEXP, SEXP XSEXP, SEXP ySEXP, SEXP tauSEXP, SEXP uSEXP, SEXP vSEXP, SEXP betaSEXP, SEXP u_distanceSEXP, SEXP dSEXP, SEXP lSEXP, SEXP sigmaSEXP, SEXP tolSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP uv_is_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type u_distance(u_distanceSEXP);
    Rcpp::traits::input_parameter< double& >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type uv_is_init(uv_is_initSEXP);
    rcpp_result_gen = Rcpp::wrap(lr_(A, X, y, tau, u, v, beta, u_distance, d, l, sigma, tol, max_iter, verbose, uv_is_init));
    return rcpp_result_gen;
END_RCPP
}
// gibbsC
NumericMatrix gibbsC(int N, int thin);
RcppExport SEXP _SA24204148_gibbsC(SEXP NSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbsC(N, thin));
    return rcpp_result_gen;
END_RCPP
}
// vaccC
NumericVector vaccC(NumericVector age, LogicalVector female, LogicalVector ily);
RcppExport SEXP _SA24204148_vaccC(SEXP ageSEXP, SEXP femaleSEXP, SEXP ilySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type female(femaleSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type ily(ilySEXP);
    rcpp_result_gen = Rcpp::wrap(vaccC(age, female, ily));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SA24204148_lr", (DL_FUNC) &_SA24204148_lr, 10},
    {"_SA24204148_lr_", (DL_FUNC) &_SA24204148_lr_, 15},
    {"_SA24204148_gibbsC", (DL_FUNC) &_SA24204148_gibbsC, 2},
    {"_SA24204148_vaccC", (DL_FUNC) &_SA24204148_vaccC, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_SA24204148(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
